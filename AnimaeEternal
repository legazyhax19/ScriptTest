-- ‡πÇ‡∏´‡∏•‡∏î Fluent GUI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "HappyHUB",
    SubTitle = "By Legazyhax19",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 400),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "swords" })
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
local monsterMap = {} -- [‡∏ä‡∏∑‡πà‡∏≠ Title] = { Id = id, Health = health, Reference = mob }
local selectedMonsterId = nil
local selectedMobData = nil
local autofarm = false
local lastTarget = nil

-- Dropdown UI
local monsterDropdown = Tabs.Main:AddDropdown("SelectMonster", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå",
    Values = {},
    Multi = false,
    Default = nil
})

monsterDropdown:OnChanged(function(title)
    selectedMobData = monsterMap[title]
    selectedMonsterId = selectedMobData and selectedMobData.Id
    Fluent:Notify({
        Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        Content = "ID: " .. tostring(selectedMonsterId),
        Duration = 3
    })
end)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏∞ 1000 Studs
local function loadMonsters()
    monsterMap = {}
    selectedMonsterId = nil
    selectedMobData = nil
    monsterDropdown:SetValue(nil)

    local titles = {}
    local maxDistance = 1000 -- ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
    local playerPos = hrp.Position

    for _, mob in pairs(workspace.Debris.Monsters:GetChildren()) do
        local id = mob:GetAttribute("Monster_Id")
        local title = mob:GetAttribute("Title")
        local health = tonumber(mob:GetAttribute("Health"))
        local mobHRP = mob:FindFirstChild("HumanoidRootPart")

        if id and title and mobHRP and not monsterMap[title] then
            local distance = (mobHRP.Position - playerPos).Magnitude

            if distance <= maxDistance then
                monsterMap[title] = {
                    Id = id,
                    Health = health or 0,
                    Reference = mob
                }
                table.insert(titles, title)
            end
        end
    end

    monsterDropdown:SetValues(titles)

    Fluent:Notify({
        Title = "‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        Content = "‡∏û‡∏ö " .. #titles .. " ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ " .. tostring(maxDistance) .. " studs",
        Duration = 3
    })
end

-- ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown
loadMonsters()

-- ‡∏õ‡∏∏‡πà‡∏° Refresh ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
Tabs.Main:AddButton({
    Title = "üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå",
    Callback = loadMonsters
})

-- Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î AutoFarm
Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°",
    Default = false,
    Callback = function(value)
        autofarm = value
    end
})

local RunService = game:GetService("RunService")
local currentTarget = nil
local hasWarped = false

local function setupTargetDeathListener(humanoid)
    if humanoid then
        if humanoid:FindFirstChild("__AutofarmDeath") then
            humanoid:FindFirstChild("__AutofarmDeath"):Destroy()
        end

        local tag = Instance.new("ObjectValue")
        tag.Name = "__AutofarmDeath"
        tag.Value = humanoid
        tag.Parent = humanoid

        humanoid.Died:Connect(function()
            currentTarget = nil
            hasWarped = false
        end)
    end
end

RunService.Heartbeat:Connect(function()
    if autofarm and selectedMonsterId then
        if not currentTarget or not currentTarget.Parent or
           currentTarget:FindFirstChildOfClass("Humanoid") == nil or
           currentTarget:FindFirstChildOfClass("Humanoid").Health <= 0 then
            currentTarget = nil
            hasWarped = false
        end

        if not currentTarget then
            local nearestMob = nil
            local nearestDist = math.huge

            for _, mob in pairs(workspace.Debris.Monsters:GetChildren()) do
                if mob:GetAttribute("Monster_Id") == selectedMonsterId then
                    local humanoid = mob:FindFirstChildOfClass("Humanoid")
                    local mobHRP = mob:FindFirstChild("HumanoidRootPart")

                    if humanoid and humanoid.Health > 0 and mobHRP then
                        local dist = (mobHRP.Position - hrp.Position).Magnitude
                        if dist < nearestDist then
                            nearestDist = dist
                            nearestMob = mob
                        end
                    end
                end
            end

            if nearestMob then
                currentTarget = nearestMob
                setupTargetDeathListener(currentTarget:FindFirstChildOfClass("Humanoid"))
            end
        end

        -- ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≠‡∏ô
        if currentTarget then
            local mobHRP = currentTarget:FindFirstChild("HumanoidRootPart")
            if mobHRP and character and character.PrimaryPart then
                local mobPos = mobHRP.Position
                local direction = (hrp.Position - mobPos).Unit
                local distance = 8 -- ‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≠‡∏ô 8 studs
                local targetPos = mobPos + direction * distance + Vector3.new(0, 0, 0)

                local lookAt = CFrame.new(targetPos, mobHRP.Position)

                -- ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≠‡∏ô‡∏à‡∏∞‡∏ï‡∏≤‡∏¢
                character:SetPrimaryPartCFrame(lookAt)
            end
        end

    else
        currentTarget = nil
    end
end)
