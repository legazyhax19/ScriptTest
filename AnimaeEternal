-- ‡πÇ‡∏´‡∏•‡∏î Fluent GUI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "HappyHUB",
    SubTitle = "By Legazyhax19",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 400),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "swords" })
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
local monsterMap = {} -- [‡∏ä‡∏∑‡πà‡∏≠ Title] = { Id = id, Health = health, Reference = mob }
local selectedMonsterId = nil
local selectedMobData = nil
local autofarm = false
local lastTarget = nil

-- Dropdown UI
local monsterDropdown = Tabs.Main:AddDropdown("SelectMonster", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå",
    Values = {},
    Multi = false,
    Default = nil
})

monsterDropdown:OnChanged(function(title)
    selectedMobData = monsterMap[title]
    selectedMonsterId = selectedMobData and selectedMobData.Id
    Fluent:Notify({
        Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        Content = "ID: " .. tostring(selectedMonsterId),
        Duration = 3
    })
end)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏∞ 1000 Studs
local function loadMonsters()
    monsterMap = {}
    selectedMonsterId = nil
    selectedMobData = nil
    monsterDropdown:SetValue(nil)

    local titles = {}
    local maxDistance = 1000 -- ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
    local playerPos = hrp.Position

    for _, mob in pairs(workspace.Debris.Monsters:GetChildren()) do
        local id = mob:GetAttribute("Monster_Id")
        local title = mob:GetAttribute("Title")
        local health = tonumber(mob:GetAttribute("Health"))
        local mobHRP = mob:FindFirstChild("HumanoidRootPart")

        if id and title and mobHRP and not monsterMap[title] then
            local distance = (mobHRP.Position - playerPos).Magnitude

            if distance <= maxDistance then
                monsterMap[title] = {
                    Id = id,
                    Health = health or 0,
                    Reference = mob
                }
                table.insert(titles, title)
            end
        end
    end

    monsterDropdown:SetValues(titles)

    Fluent:Notify({
        Title = "‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        Content = "‡∏û‡∏ö " .. #titles .. " ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ " .. tostring(maxDistance) .. " studs",
        Duration = 3
    })
end

-- ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown
loadMonsters()

-- ‡∏õ‡∏∏‡πà‡∏° Refresh ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
Tabs.Main:AddButton({
    Title = "üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå",
    Callback = loadMonsters
})

-- Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î AutoFarm
Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°",
    Default = false,
    Callback = function(value)
        autofarm = value
    end
})

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local character = nil
local hrp = nil

local autofarm = false
local selectedMonsterId = nil
local currentTarget = nil
local hasWarped = false
local lastWarpTime = 0
local warpInterval = 0.15 -- ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏£‡πå‡∏õ

-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
local function onCharacterAdded(char)
    character = char
    hrp = char:WaitForChild("HumanoidRootPart")

    -- ‡∏ï‡∏±‡πâ‡∏á PrimaryPart ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not character.PrimaryPart then
        character.PrimaryPart = hrp or character:FindFirstChildWhichIsA("BasePart")
        print("Set character.PrimaryPart to:", character.PrimaryPart)
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

local function setupTargetDeathListener(humanoid)
    if humanoid then
        if humanoid:FindFirstChild("__AutofarmDeath") then
            humanoid:FindFirstChild("__AutofarmDeath"):Destroy()
        end

        local tag = Instance.new("ObjectValue")
        tag.Name = "__AutofarmDeath"
        tag.Value = humanoid
        tag.Parent = humanoid

        humanoid.Died:Connect(function()
            currentTarget = nil
            hasWarped = false
        end)
    end
end

RunService.Heartbeat:Connect(function()
    if not autofarm or not selectedMonsterId then
        -- ‡∏õ‡∏¥‡∏î AutoFarm ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        currentTarget = nil
        if hasWarped and character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.GettingUp) -- ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥
            end
        end
        hasWarped = false
        return
    end

    if not character or not hrp then
        print("Waiting for character or HRP...")
        return
    end

    if not currentTarget or not currentTarget.Parent then
        print("Clearing target")
        currentTarget = nil
        hasWarped = false
    end

    if not currentTarget then
        print("Searching for target with ID:", selectedMonsterId)
        for _, mob in pairs(workspace.Debris.Monsters:GetChildren()) do
            print("Check mob:", mob.Name, "ID:", mob:GetAttribute("Monster_Id"))
            if mob:GetAttribute("Monster_Id") == selectedMonsterId then
                local humanoid = mob:FindFirstChildOfClass("Humanoid")
                local mobHRP = mob:FindFirstChild("HumanoidRootPart")
                if humanoid then
                    print("Humanoid found with Health:", humanoid.Health)
                else
                    print("Humanoid NOT found")
                end
                if mobHRP then
                    print("HumanoidRootPart found")
                else
                    print("HumanoidRootPart NOT found")
                end
                if humanoid and humanoid.Health > 0 and mobHRP then
                    currentTarget = mob
                    setupTargetDeathListener(humanoid)
                    print("Target selected:", mob.Name)
                    break
                end
            end
        end
        if not currentTarget then
            print("No valid target found for ID:", selectedMonsterId)
        end
    end

    if currentTarget and tick() - lastWarpTime > warpInterval then
        local mobHRP = currentTarget:FindFirstChild("HumanoidRootPart")
        if mobHRP then
            local safeOffset = Vector3.new(0, 3, -3) -- ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            local newCFrame = mobHRP.CFrame + safeOffset

            if character.PrimaryPart then
                character:SetPrimaryPartCFrame(newCFrame)
                print("Warped to target:", currentTarget.Name)
            else
                print("Character primary part missing")
            end

            if not hasWarped then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                end
                hasWarped = true
            end

            lastWarpTime = tick()
        else
            print("Target missing HumanoidRootPart")
            currentTarget = nil
        end
    end
end)

-- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á selectedMonsterId ‡∏à‡∏≤‡∏Å Dropdown
-- ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏°‡∏µ monsterMap ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
-- monsterDropdown:OnChanged(function(title)
--     local selectedMobData = monsterMap[title]
--     if selectedMobData then
--         selectedMonsterId = selectedMobData.Id
--         print("Selected Monster:", title, "ID:", selectedMonsterId)
--     else
--         selectedMonsterId = nil
--         print("Selected invalid monster title:", title)
--     end
-- end)

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ autofarm ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏î‡∏¢ Toggle GUI
-- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î autofarm:
-- autofarm = true  -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°
-- autofarm = false -- ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏≤‡∏£‡πå‡∏°

