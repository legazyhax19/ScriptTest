-- ‡πÇ‡∏´‡∏•‡∏î Fluent GUI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "HappyHUB",
    SubTitle = "By Legazyhax19",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 400),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "swords" })
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
local monsterMap = {}
local selectedMonsterId = nil
local selectedMobData = nil
local autofarm = false
local currentTarget = nil
local hasWarped = false

-- Dropdown UI
local monsterDropdown = Tabs.Main:AddDropdown("SelectMonster", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå",
    Values = {},
    Multi = false,
    Default = nil
})

monsterDropdown:OnChanged(function(title)
    selectedMobData = monsterMap[title]
    selectedMonsterId = selectedMobData and selectedMobData.Id
    Fluent:Notify({
        Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        Content = "ID: " .. tostring(selectedMonsterId),
        Duration = 3
    })
end)

-- ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß
local function loadMonsters()
    monsterMap = {}
    selectedMonsterId = nil
    selectedMobData = nil
    monsterDropdown:SetValue(nil)

    local titles = {}
    local maxDistance = 1000
    local playerPos = hrp.Position

    for _, mob in pairs(workspace.Debris.Monsters:GetChildren()) do
        local id = mob:GetAttribute("Monster_Id")
        local title = mob:GetAttribute("Title")
        local health = tonumber(mob:GetAttribute("Health"))
        local mobHRP = mob:FindFirstChild("HumanoidRootPart")

        if id and title and mobHRP and not monsterMap[title] then
            local distance = (mobHRP.Position - playerPos).Magnitude
            if distance <= maxDistance then
                monsterMap[title] = {
                    Id = id,
                    Health = health or 0,
                    Reference = mob
                }
                table.insert(titles, title)
            end
        end
    end

    monsterDropdown:SetValues(titles)

    Fluent:Notify({
        Title = "‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        Content = "‡∏û‡∏ö " .. #titles .. " ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ " .. tostring(maxDistance) .. " studs",
        Duration = 3
    })
end

loadMonsters()

Tabs.Main:AddButton({
    Title = "üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå",
    Callback = loadMonsters
})

Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°",
    Default = false,
    Callback = function(value)
        autofarm = value

local autofarm = false
local selectedMonsterId = nil
local currentTarget = nil

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

-- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Physics ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î AutoFarm
local function resetPhysics()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
        task.wait(0.1)
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        task.wait(0.2)
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
    end
end

-- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
local function setupTargetDeathListener(humanoid)
    if humanoid and not humanoid:FindFirstChild("__AutofarmDeath") then
        local tag = Instance.new("ObjectValue")
        tag.Name = "__AutofarmDeath"
        tag.Value = humanoid
        tag.Parent = humanoid

        humanoid.Died:Connect(function()
            currentTarget = nil
        end)
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏Å
local function updateAutoFarm()
    if not autofarm or not selectedMonsterId then return end
    if not currentTarget or not currentTarget.Parent then
        currentTarget = nil
    end

    if not currentTarget then
        for _, mob in pairs(workspace.Debris.Monsters:GetChildren()) do
            if mob:GetAttribute("Monster_Id") == selectedMonsterId then
                local humanoid = mob:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    currentTarget = mob
                    setupTargetDeathListener(humanoid)
                    break
                end
            end
        end
    end

    if currentTarget then
        local mobHRP = currentTarget:FindFirstChild("HumanoidRootPart")
        if mobHRP and character and character.PrimaryPart then
            character:SetPrimaryPartCFrame(mobHRP.CFrame + Vector3.new(0, 0, -1))
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
        end
    end
end

-- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° RunService
RunService.Heartbeat:Connect(function()
    if autofarm then
        updateAutoFarm()
    else
        currentTarget = nil
        resetPhysics()
    end
end)
